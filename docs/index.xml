<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeonZhao的小木屋</title>
    <link>https://leonzyang.github.io/</link>
    <description>Recent content on LeonZhao的小木屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 27 Jun 2021 09:58:40 +0800</lastBuildDate><atom:link href="https://leonzyang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python-生成器</title>
      <link>https://leonzyang.github.io/posts/py-generator/</link>
      <pubDate>Sun, 27 Jun 2021 09:58:40 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/py-generator/</guid>
      <description>深入理解生成器 生成器是一种特殊的迭代器，当每次调用yield，函数就会暂停。生成器的好处就是节省内存空间。生成器有两种类型：生成器函数和生成器表达式
生成器表达式 将列表推导式[]改成()就行
gen=(i for i in range(10)) gen # &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x104d21960&amp;gt; isinstance(gen, types.GeneratorType) # True isinstance(gen, collections.Iterator) # True isinstance(gen, collections.Iterable) # True 生成器函数yield def func(): yield 1 yield 2 yield 3 f = func() print(next(f)) # 1 print(next(f)) # 2 print(next(f)) # 3 next 通过next(next其实也是调用__next__)可以进行迭代使用，当达到最后一个元素之后，就会抛出StopIteration
send 通过send我们可以想生成器函数发送数据，第一次发送必须是next之后，否则会报错，当然我们可以先调用send(None), 等价于next
send可以向生成器传值的同时会让生成器前进到下一个yield语句，并将yield右侧的值作为返回值
def func(): x = yield 1 r = yield x print(r) f = func() f.send(None) print(f.</description>
    </item>
    
    <item>
      <title>Python-生成器</title>
      <link>https://leonzyang.github.io/posts/py-decorator/</link>
      <pubDate>Sun, 27 Jun 2021 09:58:27 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/py-decorator/</guid>
      <description>理解装饰器 装饰器是Python里面经常使用到的一个功能，通过装饰器我们能在不修改函数的情况下为函数增加一些功能，装饰器通过语法糖调用
装饰器 普通装饰器 def logger(func): def decorator(*args, **kwargs): print(&amp;#34;func start&amp;#34;) func(*args, **kwargs) return decorator @logger def func(name): print(&amp;#34;my name is %s&amp;#34; % name) func(&amp;#34;leon&amp;#34;) 这是个装饰器的简单例子，整个调用其实就相当于logger(func(name)), 如果是有多个装饰的情况下，那么调用顺序是怎样的？
@A @B @C def func(): pass 上面执行的的过程就是A(B(C(func())))
wraps 我们先看一个例子
def logger(func): def decorator(*args, **kwargs): print(&amp;#34;func start&amp;#34;) func(*args, **kwargs) return decorator @logger def func(name): print(&amp;#34;my name is %s&amp;#34; % name) func(&amp;#34;leon&amp;#34;) print(func.__name__) # decorator 当我们调用func.name 原本上应该输出func，但是因为加入了装饰器，导致__name__、__doc__等一些构造函数被改变了，那么如果我们如何解决这个问题呢？ 这里就需要用到functools.wraps，我们看下加入wraps试下
from functools import wraps def logger(func): @wraps(func) def decorator(*args, **kwargs): print(&amp;#34;func start&amp;#34;) func(*args, **kwargs) return decorator @logger def func(name): print(&amp;#34;my name is %s&amp;#34; % name) func(&amp;#34;leon&amp;#34;) print(func.</description>
    </item>
    
    <item>
      <title>Python-单例模式</title>
      <link>https://leonzyang.github.io/posts/py-singleleton/</link>
      <pubDate>Sun, 27 Jun 2021 09:58:17 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/py-singleleton/</guid>
      <description>单例模式 包导入模式 class Singleton: pass singleton = Singleton() 装饰器模式 def SingletonDec(cls): _instance = {} def _singleton(*args, **kwargs): if cls not in _instance: _instance[cls] = cls(*args, **kwargs) return _instance[cls] return _singleton @SingletonDec class Foo: pass 类 class Singleton: def __new__(cls, *args, **kwargs): if not hasattr(cls, &amp;#39;_instance&amp;#39;): cls._instance = super().__new__(cls) return cls._instance 元类 class Singleton(type): def __call__(cls, *args, **kwargs): if not hasattr(cls, &amp;#39;_instance&amp;#39;): cls._instance = super().__call__(*args, **kwargs) return cls._instance class Foo(metaclass=Singleton): pass </description>
    </item>
    
    <item>
      <title>Go-深入理解HTTP Client</title>
      <link>https://leonzyang.github.io/posts/gohttpclient/</link>
      <pubDate>Sun, 27 Jun 2021 09:36:17 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/gohttpclient/</guid>
      <description>深入理解HTTP Client 数据结构 Client type Client struct { // HTTP Requests的 	Transport RoundTripper // HTTP重定向 	CheckRedirect func(req *Request, via []*Request) error // Cookie 	Jar CookieJar // 客户端请求的超时时间，默认为0，代表永远不超时 	Timeout time.Duration } Transport Transport会缓存连接进行重用
type Transport struct { idleMu sync.Mutex wantIdle bool // user has requested to close all idle conns  // connectMethodKey 是一个map key，保存了proxy, schema, addr，然后排列生成一个字符串 	idleConn map[connectMethodKey][]*persistConn // 从最近到最晚 	idleConnCh map[connectMethodKey]chan *persistConn idleLRU connLRU reqMu sync.</description>
    </item>
    
    <item>
      <title>Go-深入理解内存分配</title>
      <link>https://leonzyang.github.io/posts/malloc/</link>
      <pubDate>Sun, 27 Jun 2021 09:32:23 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/malloc/</guid>
      <description>深入理解内存分配 CPU缓存 CPU的发展的速度远快于内存的发展，CPU的处理速度也比内存访问速度快很多。这样很多情况下，CPU必须要等内存的相应，为了应对这种情况，CPU多谢缓存就出现了。
计算机内存金字塔图 缓存大小L1&amp;lt;L2&amp;lt;L3, 速度L1&amp;gt;L2&amp;gt;L3， L1和L2通常用在单核中，L3则用来多核中。CPU缓存的命中率代表了CPU缓存复用的情况。 CPU读取数据是从先从缓存中寻找，如果找到就立即返回给CPU处理，如果没有找到，就从相对慢的速度中读取并返回给CPU处理，同时把这个数据加入缓存中。
程序内存 unix系统进程内存占用示意图  text段在内存映射中是只读的，data和bss是可读可写 data和bss属于静态内存分配。data是初始化过的，bss是未出华的  TCmalloc TCmalloc全称Thread-Cacheing Malloc, 即线程缓存的malloc，是由Google开发的内存分配器(https://gperftools.github.io/gperftools/tcmalloc.html)。
TCmalloc通过多级缓存，降低了多线程中锁竞争的情况，通过不同的sizeclass，空间利用率高，碎片少。
如果想了解细节可以看下：
 tcmalloc浅析 TCMalloc解密  Go内存分配 Golang内存分配最开始也是TCmalloc的，后来再次基础上也改动了许多，包括内存池、预分配和延迟分配等。
介绍 Page: Golang里面的Page大小是8KB（x64操作系统页一般是4KB），一般是操作系统页的几倍 maxTinySize： 小于16Byte tinySizeClass: 16B &amp;lt; size &amp;lt;= 32KB maxSmallSize： size &amp;gt; 32K Spans: 存放mspan的指针，指针大小是8byte，每个指针指向arena的一个page bitmap:用于保存arena对应某个地址是否存在对象，以及对象是否被GC扫描过 arena：由一堆page组成 object:
从别的地方引用的一张内存管理图 go内存结构 总共分为3个区域，spans，bitmap和areaa
mspan 每个mspan对一个一个page bitmap 每个bitmap对应arena 4个指针的内存，相当于2bit对应1个指针大小的内存，两个2bit分别代表是否指针和是否应该扫描 size class 每个mspan会按照SizeClass的大小分配成若干的object，每个object可以存储一个对象。并且使用allocBits表示object使用情况，mspan会按照上面的分配原则给object分配对象
// class bytes/obj bytes/span objects tail waste max waste // 1 8 8192 1024 0 87.</description>
    </item>
    
    <item>
      <title>Go-深入理解sync.Map</title>
      <link>https://leonzyang.github.io/posts/syncmap/</link>
      <pubDate>Sun, 27 Jun 2021 09:31:25 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/syncmap/</guid>
      <description>深入理解sync.Map 数据结构 Map type Map struct { mu Mutex // 锁  read atomic.Value // 优先读取map  dirty map[interface{}]*entry // dirty当前最新的map，提供读写  misses int // 在read中读取不到读取dirty map的次数，当misses=len(dirty)，则将dirty拷贝到read } readOnly type readOnly struct { m map[interface{}]*entry amended bool // dirty中存在但是不在m，则为真 } entry type entry struct { // 如果p为nil， entry已被删除并且m.dirty=nil  // 如果p==expunged， 表示entry已被删除，并且dirty不为nil，并且entry不存在dirty中  // 其他entry是个正常值 	p unsafe.Pointer // *interface{} } expunged expunged是个空指针表示dirty中已删除
var expunged = unsafe.Pointer(new(interface{})) 使用 Load func (m *Map) Load(key interface{}) (value interface{}, ok bool) { // 第一次从read中获取数据 	read, _ := m.</description>
    </item>
    
    <item>
      <title>Go-深入理解WaitGroup</title>
      <link>https://leonzyang.github.io/posts/waitgroup/</link>
      <pubDate>Sun, 27 Jun 2021 09:30:47 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/waitgroup/</guid>
      <description>深入理解WaitGroup waitgroup主要是用来等待一些goroutine完成
数据结构 type WaitGroup struct { noCopy noCopy // 不允许拷贝，用go vet检测  // 高32位存储counter数量，低32位存储waiter数量，最后4个字节存储sema 	state1 [3]uint32 } 主要方法 Add func (wg *WaitGroup) Add(delta int) { // 获取statep和sema 	statep, semap := wg.state() if race.Enabled { _ = *statep // trigger nil deref early 	if delta &amp;lt; 0 { // Synchronize decrements with Wait. 	race.ReleaseMerge(unsafe.Pointer(wg)) } race.Disable() defer race.Enable() } // goroutine+delta，delta可能是负数 	state := atomic.AddUint64(statep, uint64(delta)&amp;lt;&amp;lt;32) v := int32(state &amp;gt;&amp;gt; 32) // 获取waiters 	w := uint32(state) if race.</description>
    </item>
    
    <item>
      <title>Go-深入理解Reflect</title>
      <link>https://leonzyang.github.io/posts/reflect/</link>
      <pubDate>Sun, 27 Jun 2021 09:28:31 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/reflect/</guid>
      <description>深入理解Reflect Go是一门静态语言，我们可以使用反射对不同类型的对象进行操作。
Type 我们可以通过TypeOf将一个对象转换成Type
t := reflect.TypeOf(1) fmt.Println(t) // int 首先我们看下Type的组成(下图中我们省略了一些字段)
type Type interface { // 返回第i个方法，超过范围，则panic 	Method(int) Method // 通过名称获取方法 	MethodByName(string) (Method, bool) // 方法数量 	NumMethod() int // 类型名 	Name() string // 返回包路径（完全路径） 	PkgPath() string // 类似unsafe.Sizeof 	Size() uintptr // 字符串表示，可能包含短包名 	String() string // 类型 	Kind() Kind // 如果该类型实现了u的接口，则返回true 	Implements(u Type) bool // 返回元素类型，如果kind不是slice,channel,map,pointer, 则painc 	Elem() Type // 第几个字段 	Field(i int) StructField FieldByIndex(index []int) StructField // 根据name返回字段细腻系 	FieldByName(name string) (StructField, bool) FieldByNameFunc(match func(string) bool) (StructField, bool) // 返回第i个参数类型 	In(i int) Type // 返回array类型的长度，如果不是，则panic 	Len() int // 返回field的数量 	NumField() int // 返回参数的数量 	NumIn() int } 可以看到Type是interface，接下来我们看下TypeOf</description>
    </item>
    
    <item>
      <title>Go-深入理解pool</title>
      <link>https://leonzyang.github.io/posts/pool/</link>
      <pubDate>Sun, 27 Jun 2021 09:28:25 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/pool/</guid>
      <description>深入理解pool sync.Pool 是用来保存和获取临时对象的
结构 type Pool struct { noCopy noCopy // 无法拷贝，保证唯一  local unsafe.Pointer // 本地pool，实际类型是[P]poolLocal 	localSize uintptr // 本地pool的大小  // get为空的时候，使用new去创建一个object 	New func() interface{} } type poolLocal struct { poolLocalInternal // Prevents false sharing on widespread platforms with 	// 128 mod (cache line size) = 0 . 	pad [128 - unsafe.Sizeof(poolLocalInternal{})%128]byte } type poolLocalInternal struct { private interface{} // 私有数据，不会被其他P获取到 	shared []interface{} // 共享数据，会被其他P获取 	Mutex // 锁 } 使用 put func (p *Pool) Put(x interface{}) { if x == nil { return } if race.</description>
    </item>
    
    <item>
      <title>Go-深入理解Panic</title>
      <link>https://leonzyang.github.io/posts/panic/</link>
      <pubDate>Sun, 27 Jun 2021 09:28:12 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/posts/panic/</guid>
      <description>深入理解Panic 数据结构 //go:notinheap type _panic struct { argp unsafe.Pointer // 对应panic函数的指针 	arg interface{} // panic的参数 	link *_panic // 链接上一个panic，用链表存储 	recovered bool // 是否已被recovery 	aborted bool // 是否已中止 } panic具体调用的函数，我们可以用个例子写出
package main func main(){ panic(&amp;#34;error&amp;#34;) } # go tool compile -S main.go ... 0x0028 00040 (panic_demo.go:4)	LEAQ	&amp;#34;&amp;#34;.statictmp_0(SB), AX 0x002f 00047 (panic_demo.go:4)	PCDATA	$2, $0 0x002f 00047 (panic_demo.go:4)	MOVQ	AX, 8(SP) 0x0034 00052 (panic_demo.go:4)	CALL	runtime.gopanic(SB) ... 可以看到是调用的gopanic函数，那我们看下gopanic函数做了什么</description>
    </item>
    
  </channel>
</rss>
