<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algos on LeonZhao的小木屋</title>
    <link>https://leonzyang.github.io/algo/</link>
    <description>Recent content in Algos on LeonZhao的小木屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Tue, 22 Jun 2021 20:57:57 +0800</lastBuildDate><atom:link href="https://leonzyang.github.io/algo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二分查找</title>
      <link>https://leonzyang.github.io/algo/binary_search/</link>
      <pubDate>Tue, 22 Jun 2021 20:57:57 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/binary_search/</guid>
      <description>二分查找 二分查找是一种简单易懂的快速查找算法，二分查找要求必须有序。
算法实现 def binary_search(arr, target): low = 0 high = len(arr) - 1 while low &amp;lt;= high: mid = high - ((high - low) &amp;gt;&amp;gt; 1) if arr[mid] == target: return mid elif arr[mid] &amp;gt; target: high = mid - 1 else: low = mid + 1 return -1 循环退出条件 当 low &amp;gt; high 就是循环退出
mid 取值 采用mid = high - (high - low) &amp;gt;&amp;gt; 1是为了防止 mid 溢出
low 和 high 的更新 对 low 和 high 进行+1 和-1 的操作，如果等于 mid，可能会造成死循环</description>
    </item>
    
    <item>
      <title>中缀转后缀表达式</title>
      <link>https://leonzyang.github.io/algo/rpn/</link>
      <pubDate>Sun, 06 Jun 2021 10:39:29 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/rpn/</guid>
      <description>中缀转后缀 中缀转后缀表达式 中缀转后缀又叫逆波兰表达式，通过两个栈实现，一个是存储数字，叫数字栈，一个存储符号，叫符号栈
 遇到数字直接入数字栈 遇到括号，左括号，直接入符号栈，遇到右括号，符号栈为空直接入栈，从符号栈栈顶弹出运算符入数字栈，直接遇到左括号，左括号对齐 遇到运算符，如果运算符优先级大于栈顶运算符，入符号栈, 反之，将符号栈栈顶弹出运算符，入数字栈，然后再将遇到的运算符入符号栈  def rpn(s): oper_stack = Stack() num_stack = Stack() for i in range(len(s)): c = s[i] if ord(c) &amp;gt;= 48 and ord(c) &amp;lt;= 57: num_stack.push(c) elif c == &amp;#39;+&amp;#39; or c == &amp;#39;-&amp;#39;: if len(oper_stack) &amp;gt; 0 and (oper_stack.peek() == &amp;#39;*&amp;#39; or \ oper_stack.peek() == &amp;#39;/&amp;#39;): num_stack.push(oper_stack.pop()) oper_stack.push(c) elif c == &amp;#39;)&amp;#39;: while len(oper_stack) &amp;gt; 0: v = oper_stack.pop() if v == &amp;#39;(&amp;#39;: break num_stack.</description>
    </item>
    
    <item>
      <title>常见五大算法-贪心</title>
      <link>https://leonzyang.github.io/algo/greedy/</link>
      <pubDate>Sun, 16 May 2021 11:45:26 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/greedy/</guid>
      <description>贪心算法 常见题解 55. 跳跃游戏 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个下标。 示例 1： 输入：nums = [2,3,1,1,4] 输出：true 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。 示例 2： 输入：nums = [3,2,1,0,4] 输出：false 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。 提示： 1 &amp;lt;= nums.length &amp;lt;= 3 * 104 0 &amp;lt;= nums[i] &amp;lt;= 105 题解 对于这道题，只要求我们返回是否可以跳到最后节点，并没有让我们用最优解，所以我们可以用贪心算法求局部最优，用maxJump存储当前可以跳跃的最大距离，然后遍历数组，如果i小于等于maxJump，则更新最大的跳跃距离，最后如果maxJump大于n-1，则说明可以达到。
代码 class Solution: def canJump(self, nums: List[int]) -&amp;gt; bool: n = len(nums) # 可以跳跃的最大距离 maxJump = 0 for i in range(n): #  if i &amp;lt;= maxJump: maxJump = max(maxJump, i + nums[i]) if maxJump &amp;gt;= n - 1: return True return False 135.</description>
    </item>
    
    <item>
      <title>常见五大算法-递归</title>
      <link>https://leonzyang.github.io/algo/recursion/</link>
      <pubDate>Mon, 10 May 2021 21:33:54 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/recursion/</guid>
      <description>递归 在数学与计算机科学中，递归(Recursion)是指在函数的定义中使用函数自身的方法。实际上，递归，顾名思义，其包含了两个意思：递 和 归，这正是递归思想的精华所在。
递归伪代码
def recursion(参数): if 结束条件: return 处理问题 recursion(缩小参数) 汉诺塔问题 在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制: (1) 每次只能移动一个盘子; (2) 盘子只能从柱子顶端滑出移到下一根柱子; (3) 盘子只能叠在比它大的盘子上。 请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。 你需要原地修改栈。 示例1: 输入：A = [2, 1, 0], B = [], C = [] 输出：C = [2, 1, 0] 示例2: 输入：A = [1, 0], B = [], C = [] 输出：C = [1, 0] 提示: A中盘子的数目不大于14个。 n = 1 时，直接把盘子从 A 移到 C； n &amp;gt; 1 时， 1.</description>
    </item>
    
    <item>
      <title>常用五大算法-回溯</title>
      <link>https://leonzyang.github.io/algo/backtrack/</link>
      <pubDate>Sat, 08 May 2021 15:11:03 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/backtrack/</guid>
      <description>回溯算法 回溯算法是一个枚举过程，在搜索中寻找问题解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。
框架 res = [] def backtrack(当前路径，选择列表): if 满足条件: res.append(path) return for 值 in 选择列表: 加入到当前路径 backtrack(当前路径，选择条件) 从当前路径弹出 经典题目 全排列 leetcode 46. 全排列
给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。 示例 1： 输入：nums = [1,2,3] 输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] 示例 2： 输入：nums = [0,1] 输出：[[0,1],[1,0]] 示例 3： 输入：nums = [1] 输出：[[1]] 提示： 1 &amp;lt;= nums.length &amp;lt;= 6 -10 &amp;lt;= nums[i] &amp;lt;= 10 nums 中的所有整数 互不相同 图形展示 这张图取自网络
解答 class Solution: def permute(self, nums: List[int]) -&amp;gt; List[List[int]]: def backtrack(nums, n, used, path, ret): if len(path) == n: ret.</description>
    </item>
    
    <item>
      <title>排序算法-希尔排序</title>
      <link>https://leonzyang.github.io/algo/sort/shell_sort/</link>
      <pubDate>Sun, 18 Apr 2021 17:49:49 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/sort/shell_sort/</guid>
      <description> 时间复杂度O(nlogN) 不稳定排序   def shell_sort(arr): n = len(arr) gap = n // 2 while gap &amp;gt; 0: for i in range(gap, n): j = i while j &amp;gt; 0: if arr[j] &amp;gt; arr[j-gap]: arr[j], arr[j-gap] = arr[j-gap], arr[j] j-= gap else: break gap /= 2 </description>
    </item>
    
    <item>
      <title>排序算法-归并排序</title>
      <link>https://leonzyang.github.io/algo/sort/merge_sort/</link>
      <pubDate>Sun, 18 Apr 2021 17:49:40 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/sort/merge_sort/</guid>
      <description> 时间复杂度O(nlogN) 不稳定排序   def merge(arrA, arrB): arr = [] i,j = 0,0 while i &amp;lt; len(arrA) and j &amp;lt; len(arrB): if arrA[i] &amp;lt; arrB[j]: arr.append(arrA[i]) i+=1 else: arr.append(arrB[j]) j+=1 for start in range(i, len(arrA)): arr.append(arrA[start]) for start in range(j, len(arrB)): arr.append(arrB[start]) return arr def merge_sort(arr): if len(arr) &amp;lt;= 1: return mid = len(arr) // 2 arrA = merge_sort(arr[:mid]) arrB = merge_sort(arr[mid:]) return merge(arrA, arrB) </description>
    </item>
    
    <item>
      <title>排序算法-堆排序</title>
      <link>https://leonzyang.github.io/algo/sort/heap_sort/</link>
      <pubDate>Sun, 18 Apr 2021 16:11:39 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/sort/heap_sort/</guid>
      <description> 时间复杂度O(nlogN) 不稳定排序   def heapify(tree, n, i): if i &amp;gt;= n: return max_index = i left_child = 2*i + 1 right_child = left_child + 1 if left_child &amp;lt; n and tree[max_index] &amp;lt; tree[left_child]: max_index = left_child if right_child &amp;lt; n and tree[max_index] &amp;lt; tree[right_child]: max_index = right_child if max_index != i: tree[i], tree[max_index] = tree[max_index], tree[i] heapify(tree, n, max_index) def build_heap(arr): last_node = len(arr) - 1 parent = (last_node - 1) // 2 for i in range(parent, -1, -1): heapify(arr, last_node, i) def heap_sort(arr): build_heap(arr) for i in range(1, len(arr)): arr[0], arr[len(arr)-i] = arr[len(arr)-i], arr[0] heapify(arr, len(arr)-i-1, 0) </description>
    </item>
    
    <item>
      <title>排序算法-插入排序</title>
      <link>https://leonzyang.github.io/algo/sort/insert_sort/</link>
      <pubDate>Sun, 18 Apr 2021 16:11:33 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/sort/insert_sort/</guid>
      <description> 时间复杂度O(n2) 稳定排序   def insert_sort(arr): if len(arr) &amp;lt;= 1: return for i in range(1, len(arr)): j = i while j &amp;gt; 0: if arr[j] &amp;lt; arr[j - 1]: arr[j], arr[j - 1] = arr[j - 1], arr[j] j -= 1 else: break </description>
    </item>
    
    <item>
      <title>排序算法-选择排序</title>
      <link>https://leonzyang.github.io/algo/sort/select_sort/</link>
      <pubDate>Sun, 18 Apr 2021 16:11:24 +0800</pubDate>
      
      <guid>https://leonzyang.github.io/algo/sort/select_sort/</guid>
      <description> 时间复杂度O(n2) 不稳定排序   def select_sort(arr): for i in range(len(arr)): min_index = i for j in range(j+1, len(arr)): if arr[i] &amp;lt; arr[j]: min_index = j if min_index != i: arr[i], arr[min_index] = arr[min_index], arr[i] </description>
    </item>
    
  </channel>
</rss>
